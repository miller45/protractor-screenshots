// Generated by CoffeeScript 1.10.0
(function() {
  var Q, _, browserName, capabilities, capabilityString, deriveDirFromCapabilities, dirnameFunction, disableScreenshots, fs, getPath, matchScreenshot, matchesCapabilities, mkdirp, platform, resemble, resemblejsOutputSettings, rimraf, saveFailureImages, screenshotBase, screenshotSizes, shortenVersion, slug, takeScreenshot, version;

  fs = require('fs');

  mkdirp = require('mkdirp');

  rimraf = require('rimraf');

  slug = require('slug');

  resemble = require('resemble').resemble;

  Q = require('q');

  _ = require('lodash');

  capabilityString = '';

  browserName = '';

  platform = '';

  version = '';

  capabilities = null;

  browser.getCapabilities().then(function(returnValue) {
    capabilities = returnValue.caps_;
    browserName = returnValue.caps_.browserName.toLowerCase();
    platform = returnValue.caps_.platform.toLowerCase();
    version = returnValue.caps_.version.toLowerCase();
    return capabilityString = platform + "-" + browserName + "-" + version;
  });

  disableScreenshots = browser.params['disableScreenshots'];

  screenshotBase = browser.params['screenshotsBasePath'] || '.';

  screenshotSizes = browser.params['screenshotSizes'];

  dirnameFunction = browser.params['dirnameFunction'];

  resemblejsOutputSettings = browser.params["resemblejsOutputSettings"];

  matchesCapabilities = function(other) {
    var excludeKeys;
    excludeKeys = ['sizes'];
    return _.every(other, function(value, key) {
      if (excludeKeys.indexOf(key) !== -1) {
        return true;
      }
      return capabilities[key] === value;
    });
  };

  deriveDirFromCapabilities = function(platform, browserName, version) {
    if (!dirnameFunction) {
      return platform + "-" + browserName + "-" + (shortenVersion(platform, browserName, version));
    }
    return dirnameFunction(platform, browserName, version);
  };

  shortenVersion = function(platform, browserName, version) {
    var idx, sver;
    sver = version.toString();
    if (browserName.toLowerCase() === "chrome") {
      idx = sver.indexOf('.');
      if (idx > -1) {
        sver = sver.substr(0, idx) + ".x";
      }
    }
    return sver;
  };

  getPath = function(suite) {
    var buildName;
    buildName = function(suite) {
      var prefix;
      prefix = '';
      if (suite.parentSuite) {
        prefix = (buildName(suite.parentSuite)) + " ";
      }
      return "" + prefix + suite.description;
    };
    return screenshotBase + "/" + (slug(buildName(suite))) + "/" + (slug(deriveDirFromCapabilities(platform, browserName, version)));
  };

  matchScreenshot = function(spec, screenshotName, screenshot) {
    var filename, label, path;
    path = getPath(spec.suite);
    label = screenshotName + " - " + screenshot.width + "x" + screenshot.height;
    filename = (slug(spec.description + " " + screenshotName)) + "-" + screenshot.width + "x" + screenshot.height + ".png";
    return Q.fcall(function() {
      if (!spec.suite._screenshotsInitialized) {
        return Q.all([Q.nfcall(rimraf, path + '/missing'), Q.nfcall(rimraf, path + '/failed'), Q.nfcall(rimraf, path + '/diff')]);
      } else {
        return true;
      }
    }).then(function() {
      spec.suite._screenshotsInitialized = true;
      return Q.nfcall(fs.readFile, path + '/' + filename);
    }).then(function(data) {
      var deferred;
      if (screenshot.data === data.toString('base64')) {
        return {
          match: true
        };
      }
      deferred = Q.defer();
      if (resemblejsOutputSettings) {
        resemble.outputSettings(resemblejsOutputSettings);
      }
      resemble(new Buffer(screenshot.data, 'base64')).compareTo(data).onComplete(function(result) {
        if (result.misMatchPercentage === '0.00') {
          return deferred.resolve({
            match: true
          });
        } else {
          return deferred.resolve({
            match: false,
            label: label,
            path: path,
            filename: filename,
            actual: screenshot.data,
            difference: result.getImageDataUrl().substr(22),
            reason: "differed by " + result.misMatchPercentage + "%"
          });
        }
      });
      return deferred.promise;
    }, function(error) {
      if (error) {
        return Q({
          label: label,
          path: path,
          filename: filename,
          actual: screenshot.data,
          match: false,
          missing: true,
          reason: 'missing'
        });
      }
    }).then(function(result) {
      if (!result.match) {
        saveFailureImages(result);
      }
      return expect(result.match).toBe(true, result.label + " on " + capabilityString + ": " + result.reason);
    });
  };

  saveFailureImages = function(result) {
    var writeImage;
    writeImage = function(path, data) {
      return Q.nfcall(mkdirp, path).then(function() {
        return Q.nfcall(fs.writeFile, path + "/" + result.filename, data, {
          encoding: 'base64'
        });
      });
    };
    if (result.missing) {
      return Q.all([writeImage(result.path + "/missing", result.actual)]);
    } else {
      return Q.all([writeImage(result.path + "/failed", result.actual), writeImage(result.path + "/diff", result.difference)]);
    }
  };

  takeScreenshot = function(spec, screenshotName, delay, beforeEach) {
    var actualTakeScreenshot, ref, screenSizes, setScreenSize;
    setScreenSize = function(width, height) {
      return browser.driver.manage().window().setSize(width, height);
    };
    screenSizes = (ref = _.find(screenshotSizes, matchesCapabilities)) != null ? ref.sizes : void 0;
    actualTakeScreenshot = function() {
      return browser.driver.manage().window().getSize().then(function(screenSize) {
        beforeEach();
        return browser.takeScreenshot().then(function(data) {
          return matchScreenshot(spec, screenshotName, {
            width: screenSize.width,
            height: screenSize.height,
            data: data
          });
        });
      });
    };
    if ((screenSizes != null ? screenSizes.length : void 0) > 0) {
      return screenSizes.reduce(function(soFar, size) {
        return soFar.then(setScreenSize(size.width, size.height).then(function() {
          return browser.sleep(delay);
        }).then(function() {
          return actualTakeScreenshot();
        }));
      }, Q(true));
    } else {
      return actualTakeScreenshot();
    }
  };


  /*
  Public API
   */

  exports.checkScreenshot = function(spec, screenshotName, delay, beforeEach) {
    if (delay == null) {
      delay = {};
    }
    if (disableScreenshots) {
      return;
    }
    delay = delay || 0;
    beforeEach = beforeEach || function() {};
    return takeScreenshot(spec, screenshotName, delay, beforeEach);
  };

  exports._deriveDirFromCapabilities = function(platform, browserName, version) {
    return deriveDirFromCapabilities(platform, browserName, version);
  };

}).call(this);
